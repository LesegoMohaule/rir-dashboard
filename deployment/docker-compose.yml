version: '3.4'

volumes:
  static-data:
  media-data:
  database:
  rabbitmq:
  node-red-data:

x-common-django:
  &default-common-django
  image: kartoza/${COMPOSE_PROJECT_NAME}_django:${DJANGO_TAG}
  env_file: .env
  volumes:
    - static-data:/home/web/static
    - media-data:/home/web/media
  restart: on-failure

services:
  # Vanilla RabbitMQ service. This is needed by celery
  rabbitmq:
    image: rabbitmq:3.7-alpine
    container_name: "${COMPOSE_PROJECT_NAME}_rabbitmq"
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    restart: on-failure

  db:
    image: kartoza/postgis:13.0
    container_name: "${COMPOSE_PROJECT_NAME}_db"
    volumes:
      - database:/var/lib/postgresql/13
    environment:
      - ALLOW_IP_RANGE=0.0.0.0/0
      - USERNAME=${DATABASE_USERNAME}
      - PASS=${DATABASE_PASSWORD}
      - POSTGRES_DBNAME=${DATABASE_NAME}
    restart: on-failure:5

  django:
    <<: *default-common-django
    container_name: "${COMPOSE_PROJECT_NAME}_django"
    command: 'uwsgi --ini /uwsgi.conf'

  # Celery worker that executes celery tasks created by Django.
  worker:
    <<: *default-common-django
    container_name: "${COMPOSE_PROJECT_NAME}_worker"
    command: celery -A core.celery:app worker -B -l debug
    entrypoint: []

  nginx:
    image: kartoza/${COMPOSE_PROJECT_NAME}_nginx:${NGINX_TAG}
    container_name: "${COMPOSE_PROJECT_NAME}_nginx"
    hostname: nginx
    volumes:
      - static-data:/home/web/static:ro
      - media-data:/home/web/media:ro
    ports:
      - "${HTTP_PORT}:8080"
    restart: on-failure:5

  node-red:
    image: nodered/node-red:${NODE_RED_TAG}
    env_file: .env
    volumes:
      - node-red-data:/data